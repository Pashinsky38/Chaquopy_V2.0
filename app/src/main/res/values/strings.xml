<resources>
    <string name="app_name">Python Course</string>
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="title_activity_introduction">Introduction</string>
    <string name="python_description">Python is a high-level, general-purpose programming language known for its simplicity and readability. It\'s widely used in web development, data analysis, AI, scientific computing, and automation.  Python\'s clear syntax and extensive libraries make it easy to learn and use. It runs on Windows, macOS, and Linux, and uses dynamic typing. It is used for simple scripting to large-scale applications.</string>
    <string name="all_answers_correct">All answers are correct!</string>
    <string name="some_answers_incorrect">Some answers are incorrect.</string>
    <string name="title_activity_progress">Progress</string>
    <string name="title_activity_test">TestActivity</string>
    <string name="conditional_statements_explanation">Conditional statements (if, elif, else) allow you to execute different blocks of code based on whether a condition is true or false.\n\nThe elif keyword allows you to add multiple conditions. If the if condition is false, it checks the elif conditions one by one. If an elif condition is true, its code is executed, and the rest are skipped. If none of the if or elif conditions are true, the else block, if present, is executed.</string>

    <!-- Main Explanation String -->
    <string name="loops_explanation">Loops are used in Python to execute a block of code multiple times. Python has two main types of loops: for loops and while loops.\n\nFor loops are used to iterate over a sequence (such as a list, tuple, or string) or other iterable objects. While loops execute a block of code as long as a specified condition is true.\n\nLoops are essential for automating repetitive tasks and processing collections of data.\n\nLists are one of the most commonly used data structures in Python. A list is a collection of items that are ordered and changeable. You can create a list using square brackets, like this: my_list = [1, 2, 3, 4]. You can loop through a list using a for loop: for item in my_list: print(item).\n\nYou can add an item to the end of a list using my_list.append(5), and remove an item by value using my_list.remove(3). Use my_list.insert(1, 10) to insert 10 at index 1. To remove and return the last item, use my_list.pop().</string>

    <!-- Variables Section Strings -->
    <string name="variables_explanation">Variables are used to store data. You can think of them as containers that hold values. To create a variable, you choose a name and assign a value to it using the \'=\' operator. Variables store different types of data such as numbers, text, and boolean values (True/False). In Python, you don\'t need to declare the type of a variable when you create it - Python determines the type automatically based on the assigned value.</string>

    <!-- For Loop Section Strings -->
    <string name="for_loop_title">For Loops</string>
    <string name="for_loop_explanation">For loops are used to iterate over a sequence (like a list, tuple, string) or other iterable objects.</string>
    <string name="for_loop_example1"># Basic for loop with range\nfor i in range(5):\n    print(i)  # Prints 0, 1, 2, 3, 4</string>
    <string name="for_loop_example2"># For loop with a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)</string>

    <!-- While Loop Section Strings -->
    <string name="while_loop_title">While Loops</string>
    <string name="while_loop_explanation">While loops execute a set of statements as long as a condition is true.</string>
    <string name="while_loop_example1"># Basic while loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1  # Increment count</string>

    <!-- Loop Control Section Strings -->
    <string name="loop_control_title">Loop Control Statements</string>
    <string name="loop_control_explanation">Python provides break and continue statements to control the flow of loops.</string>
    <string name="loop_control_example"># Break example\nfor i in range(10):\n    if i == 5:\n        break  # Exit the loop when i is 5\n    print(i)\n\n# Continue example\nfor i in range(10):\n    if i % 2 == 0:\n        continue  # Skip even numbers\n    print(i)  # Only prints odd numbers</string>

    <!-- Challenge String -->
    <string name="loops_challenge">Now it\'s your turn! Try creating a program that uses a loop to print the first 10 Fibonacci numbers.</string>

    <!-- Button Strings -->
    <string name="text_to_speech_button">Text to Speech</string>
    <string name="run_code_button">Run Code</string>
    <string name="go_to_practice_button">Go to Practice</string>

    <!-- Other UI Strings -->
    <string name="loops_title">Loops in Python</string>
    <string name="code_editor_hint">Enter Python code here</string>

    <!-- Functions section strings to add to your existing strings.xml -->
    <string name="functions_title">Functions in Python</string>
    <string name="functions_explanation">Functions are reusable blocks of code that perform a specific task. They help organize code, make it more readable, and prevent repetition. Functions only run when they are called and can receive data (parameters) and return data as output.\n\nInstead of writing the same code multiple times, you can define a function once and use it whenever needed. This makes your code more maintainable and efficient.\n\nFunctions in Python are defined using the \'def\' keyword, followed by the function name and parentheses.</string>

    <!-- Function Definition Section Strings -->
    <string name="function_definition_title">Defining Functions</string>
    <string name="function_definition_explanation">To define a function in Python, you use the \'def\' keyword followed by the function name and a pair of parentheses. The code block within every function starts with a colon (:) and is indented.</string>
    <string name="function_definition_example"># Basic function definition\ndef greet():\n    print(\"Hello, World!\")\n\n# Calling the function\ngreet()  # Output: Hello, World!</string>

    <!-- Parameters Section Strings -->
    <string name="parameters_title">Function Parameters</string>
    <string name="parameters_explanation">Parameters are values that are passed to a function when it is called. They allow a function to receive data from outside. Parameters are specified within the parentheses in the function definition.</string>
    <string name="parameters_example"># Function with parameters\ndef greet_person(name):\n    print(\"Hello, \" + name + \"!\")\n\n# Calling the function with an argument\ngreet_person(\"Alice\")  # Output: Hello, Alice!\n\n# Multiple parameters\ndef add_numbers(a, b):\n    print(a + b)\n\nadd_numbers(5, 3)  # Output: 8</string>

    <!-- Return Values Section Strings -->
    <string name="return_values_title">Return Values</string>
    <string name="return_values_explanation">Functions can return a value using the \'return\' statement. This value is sent back to the code that called the function. If no return statement is used, the function returns None by default.</string>
    <string name="return_values_example"># Function with a return value\ndef multiply(a, b):\n    return a * b\n\n# Store the returned value in a variable\nresult = multiply(4, 5)\nprint(result)  # Output: 20\n\n# Return multiple values\ndef get_name_and_age():\n    return \"Bob\", 25\n\nname, age = get_name_and_age()\nprint(name)  # Output: Bob\nprint(age)   # Output: 25</string>

    <!-- Function Scope Section Strings -->
    <string name="function_scope_title">Function Scope</string>
    <string name="function_scope_explanation">Variables defined inside a function have a local scope - they can only be accessed within that function. Variables defined outside functions have a global scope and can be accessed anywhere in the program.</string>
    <string name="function_scope_example"># Local and global variables\n\n# Global variable\nmessage = \"Hello\"\n\ndef say_greeting():\n    # Local variable\n    message = \"Hi there\"\n    print(message)\n\n# Call the function\nsay_greeting()  # Output: Hi there\n\n# The global variable is unchanged\nprint(message)  # Output: Hello</string>

    <!-- Challenge String -->
    <string name="functions_challenge">Now it\'s your turn! Try creating a function that calculates and returns the average of three numbers.</string>
</resources>