<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- App Basics -->
    <string name="app_name">Python Course</string>

    <!-- Home Page -->
    <string name="learning_python">Learning Python</string>
    <string name="with_libby_pashinsky">with Libby Pashinsky</string>
    <string name="press_continue">Press on button to continue</string>

    <!-- Login Fragment -->
    <string name="enter_login_email">Enter the Email…</string>
    <string name="enter_login_password">Enter the password…</string>
    <string name="login">Login</string>
    <string name="sign_up_button">Sign up</string>
    <string name="go_back">Go back</string>

    <!-- Register Fragment -->
    <string name="welcome">Welcome! Create Your Account</string>
    <string name="already_registered">Already registered? Log in</string>
    <string name="enter_email">Please enter your email…</string>
    <string name="enter_name">Please enter your name…</string>
    <string name="enter_password">Please enter your password…</string>
    <string name="enter_phone">Please enter your phone number…</string>
    <string name="reenter_password">Please re-enter your password…</string>
    <string name="sign_up">Sign up</string>

    <!-- Introduction -->
    <string name="title_activity_introduction">Introduction</string>
    <string name="intro_title">Introduction to Python</string>
    <string name="python_description">Python is a high-level, general-purpose programming language known for its simplicity and readability. It\'s widely used in web development, data analysis, AI, scientific computing, and automation. Python\'s clear syntax and extensive libraries make it easy to learn and use. It runs on Windows, macOS, and Linux, and uses dynamic typing. It is used for simple scripting to large-scale applications.</string>

    <!-- Basics Fragment -->
    <string name="basics_title">Starting with the basics</string>
    <string name="print_explanation">In Python, you can display output using the \'print()\' function. For example, to print \'Hello, World!\', you would use the following code:</string>
    <string name="print_example">print(\'Hello, World!\')</string>
    <string name="newline_and_concatenation">To print text on a new line, you can use \'\\n\' inside the string. If you want to combine two strings, you can use the \'+\' operator like this:</string>
    <string name="newline_example">print(\'Hello\' + \', World!\\nWelcome to Python!\')</string>
    <string name="basics_challenge">Your turn! Can you print your name and age on separate lines using a single print() statement?</string>
    <string name="code_editor_hint_basics">Enter Python code here</string>
    <string name="next_button">Next</string>

    <!-- Variables Fragment -->
    <string name="variables_title">Variables in Python</string>
    <string name="variables_explanation">Variables are used to store data. You can think of them as containers that hold values. To create a variable, you choose a name and assign a value to it using the \'=\' operator. Variables store different types of data such as numbers, text, and boolean values (True/False). In Python, you don\'t need to declare the type of a variable when you create it - Python determines the type automatically based on the assigned value.</string>
    <string name="variables_rules">Variable names must start with a letter or an underscore, and can contain letters, numbers, and underscores. They are case-sensitive.</string>
    <string name="variables_example">name = \'Libby\'\nage = 30\nprint(name)\nprint(age)</string>
    <string name="variables_rules_example">valid_name = 10\n_another_valid_name = \'Hello\'\nmyVariable123 = True\n\n# Invalid:\n# 123variable = 5 (starts with a number)\n# my-variable = \'test\' (contains a hyphen)</string>
    <string name="operators_explanation">Python supports various mathematical operators:</string>
    <string name="operators_example">Addition: +\nSubtraction: -\nMultiplication: *\nDivision: /\nModulo (remainder): %\nExponentiation: **</string>
    <string name="operators_in_use_example">x = 10\ny = 3\nprint(x + y)  # Output: 13\nprint(x - y)  # Output: 7\nprint(x * y)  # Output: 30\nprint(x / y)  # Output: 3.333…\nprint(x % y)  # Output: 1\nprint(x ** y) # Output: 1000</string>
    <string name="variables_challenge">Now it\'s your turn! Try creating a variable with your name and another with your age, then print them!</string>

    <!-- Basics Fragment Practice -->
    <string name="practice_title">Practice: Printing and Variables</string>
    <string name="instruction_text">Type the output precisely as it would appear in the console.</string>
    <string name="question1_code">name = \'Michal\'\nprint(name)</string>
    <string name="question2_code">age = 25\nprint(\'My age is\', age)</string>
    <string name="question3_code">x = 10\ny = 5\nprint(x + y)</string>
    <string name="enter_output_hint">Enter the output here</string>
    <string name="check_answers_button">Check Answers</string>
    <string name="show_solution_button">Show Solution</string>
    <string name="go_to_conditional_statements">Go to Conditional Statements</string>

    <!-- Conditional Statements -->
    <string name="conditional_statements_title">Conditional Statements</string>
    <string name="conditional_statements_explanation">Conditional statements (if, elif, else) allow you to execute different blocks of code based on whether a condition is true or false.\n\nThe elif keyword allows you to add multiple conditions. If the if condition is false, it checks the elif conditions one by one. If an elif condition is true, its code is executed, and the rest are skipped. If none of the if or elif conditions are true, the else block, if present, is executed.</string>
    <string name="comparison_operators_explanation">Comparison operators (==, !=, \>, &lt;, \>=, &lt;=) are used to compare values in conditions.</string>
    <string name="comparison_operators_example">x == y  # x is equal to y\nx != y  # x is not equal to y\nx \> y   # x is greater than y\nx &lt; y   # x is less than y\nx \>= y  # x is greater than or equal to y\nx &lt;= y  # x is less than or equal to y</string>
    <string name="logical_operators_explanation">Logical operators (and, or, not) are used to combine or modify conditions.</string>
    <string name="logical_operators_example">x and y  # True if both x and y are true\nx or y   # True if either x or y is true\nnot x    # True if x is false</string>
    <string name="conditional_statement_example">age = 20\nif age &lt; 13:\n    print(\'You are a child\')\nelif age &lt; 18:\n    print(\'You are a teenager\')\nelif age &lt; 65:\n    print(\'You are an adult\')\nelse:\n    print(\'You are a senior\')</string>
    <string name="conditional_statements_challenge">Now it\'s your turn! Try creating a program that checks if a number is positive, negative, or zero.</string>

    <!-- Conditional Statements Practice -->
    <string name="conditional_practice_title">Practice: Conditional Statements</string>
    <string name="conditional_instruction_text">Write a program using conditional statements based on the given requirements.</string>
    <string name="conditional_question1">Question 1: Write a Python program that checks if a given number is even or odd. Print \'Even\' if the number is even, and \'Odd\' if it\'s odd.</string>
    <string name="conditional_question2">Question 2: Write a Python program that takes two numbers as input and determines which one is greater. Print \'The first number is greater\', \'The second number is greater\', or \'Both numbers are equal\' accordingly.</string>
    <string name="go_to_loops">Go to Loops</string>

    <!-- Loops -->
    <string name="loops_title">Loops in Python</string>
    <string name="loops_explanation">Loops are used in Python to execute a block of code multiple times. Python has two main types of loops: for loops and while loops.\n\nFor loops are used to iterate over a sequence (such as a list, tuple, or string) or other iterable objects. While loops execute a block of code as long as a specified condition is true.\n\nLoops are essential for automating repetitive tasks and processing collections of data.\n\nLists are one of the most commonly used data structures in Python. A list is a collection of items that are ordered and changeable. You can create a list using square brackets, like this: my_list = [1, 2, 3, 4]. You can loop through a list using a for loop: for item in my_list: print(item).\n\nYou can add an item to the end of a list using my_list.append(5), and remove an item by value using my_list.remove(3). Use my_list.insert(1, 10) to insert 10 at index 1. To remove and return the last item, use my_list.pop().</string>
    <string name="for_loop_title">For Loops</string>
    <string name="for_loop_explanation">For loops are used to iterate over a sequence (like a list, tuple, string) or other iterable objects.</string>
    <string name="for_loop_example1"># Basic for loop with range\nfor i in range(5):\n    print(i)  # Prints 0, 1, 2, 3, 4</string>
    <string name="for_loop_example2"># For loop with a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)</string>
    <string name="while_loop_title">While Loops</string>
    <string name="while_loop_explanation">While loops execute a set of statements as long as a condition is true.</string>
    <string name="while_loop_example1"># Basic while loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1  # Increment count</string>
    <string name="loop_control_title">Loop Control Statements</string>
    <string name="loop_control_explanation">Python provides break and continue statements to control the flow of loops.</string>
    <string name="loop_control_example"># Break example\nfor i in range(10):\n    if i == 5:\n        break  # Exit the loop when i is 5\n    print(i)\n\n# Continue example\nfor i in range(10):\n    if i % 2 == 0:\n        continue  # Skip even numbers\n    print(i)  # Only prints odd numbers</string>
    <string name="loops_challenge">Now it\'s your turn! Try creating a program that uses a loop to print the first 10 Fibonacci numbers.</string>

    <!-- Loops Practice -->
    <string name="loops_practice_title">Practice: Loops</string>
    <string name="loops_instruction_text">Write a program using loops based on the given requirements.</string>
    <string name="loops_question1">Question 1: Write a Python program using a for loop that prints only the even numbers from 1 to 20. For each number, also print whether it\'s greater than or less than 10.</string>
    <string name="loops_question2">Question 2: Write a Python program that uses a for loop to iterate through a list of numbers [12, 5, 8, 21, 13, 9, 31, 2] and create a new list containing only numbers greater than 10. Print both lists at the end.</string>
    <string name="loops_question3">Question 3: Write a Python program using a while loop that counts from 1 to 15. For each number, if it\'s divisible by 3, print \'Fizz\', if it\'s divisible by 5, print \'Buzz\', and if it\'s divisible by both 3 and 5, print \'FizzBuzz\'. Otherwise, print the number itself.</string>
    <string name="go_to_functions">Go to Functions</string>

    <!-- Functions -->
    <string name="functions_title">Functions in Python</string>
    <string name="functions_explanation">Functions are reusable blocks of code that perform a specific task. They help organize code, make it more readable, and prevent repetition. Functions only run when they are called and can receive data (parameters) and return data as output.\n\nInstead of writing the same code multiple times, you can define a function once and use it whenever needed. This makes your code more maintainable and efficient.\n\nFunctions in Python are defined using the \'def\' keyword, followed by the function name and parentheses.</string>
    <string name="function_definition_title">Defining Functions</string>
    <string name="function_definition_explanation">To define a function in Python, you use the \'def\' keyword followed by the function name and a pair of parentheses. The code block within every function starts with a colon (:) and is indented.</string>
    <string name="function_definition_example"># Basic function definition\ndef greet():\n    print(\"Hello, World!\")\n\n# Calling the function\ngreet()  # Output: Hello, World!</string>
    <string name="parameters_title">Function Parameters</string>
    <string name="parameters_explanation">Parameters are values that are passed to a function when it is called. They allow a function to receive data from outside. Parameters are specified within the parentheses in the function definition.</string>
    <string name="parameters_example"># Function with parameters\ndef greet_person(name):\n    print(\"Hello, \" + name + \"!\")\n\n# Calling the function with an argument\ngreet_person(\"Alice\")  # Output: Hello, Alice!\n\n# Multiple parameters\ndef add_numbers(a, b):\n    print(a + b)\n\nadd_numbers(5, 3)  # Output: 8</string>
    <string name="return_values_title">Return Values</string>
    <string name="return_values_explanation">Functions can return a value using the \'return\' statement. This value is sent back to the code that called the function. If no return statement is used, the function returns None by default.</string>
    <string name="return_values_example"># Function with a return value\ndef multiply(a, b):\n    return a * b\n\n# Store the returned value in a variable\nresult = multiply(4, 5)\nprint(result)  # Output: 20\n\n# Return multiple values\ndef get_name_and_age():\n    return \"Bob\", 25\n\nname, age = get_name_and_age()\nprint(name)  # Output: Bob\nprint(age)   # Output: 25</string>
    <string name="function_scope_title">Function Scope</string>
    <string name="function_scope_explanation">Variables defined inside a function have a local scope - they can only be accessed within that function. Variables defined outside functions have a global scope and can be accessed anywhere in the program.</string>
    <string name="function_scope_example"># Local and global variables\n\n# Global variable\nmessage = \"Hello\"\n\ndef say_greeting():\n    # Local variable\n    message = \"Hi there\"\n    print(message)\n\n# Call the function\nsay_greeting()  # Output: Hi there\n\n# The global variable is unchanged\nprint(message)  # Output: Hello</string>
    <string name="functions_challenge">Now it\'s your turn! Try creating a function that calculates and returns the average of three numbers.</string>

    <!-- Functions Practice -->
    <string name="functions_practice_title">Practice: Functions</string>
    <string name="functions_instruction_text">Write functions based on the given requirements.</string>
    <string name="functions_question1">Question 1: Write a Python function named \'print_pattern\' that takes a number \'n\' as an argument and prints a triangle pattern of asterisks. For example, if n=5, it should print:\n*\n**\n***\n****\n*****\nCall your function with the value 5 to test it.</string>
    <string name="functions_question2">Question 2: Write a Python function named \'calculate_grades\' that takes a list of scores and returns a list of corresponding letter grades. Use these grade ranges: A (90–100), B (80–89), C (70–79), D (60–69), F (below 60). Test your function with the list [95, 82, 74, 65, 48] and print both the scores and their corresponding grades.</string>

    <!-- Assessment Feedback -->
    <string name="all_answers_correct">All answers are correct!</string>
    <string name="some_answers_incorrect">Some answers are incorrect.</string>

    <!-- Common UI Elements -->
    <string name="code_editor_hint">Enter your code here</string>
    <string name="run_code_button">Run Code</string>
    <string name="go_to_practice_button">Go to Practice</string>
    <string name="text_to_speech_button">Text to Speech</string>

    <!-- Menu -->
    <string name="menu_introduction">Introduction to Python</string>
    <string name="menu_conditional_statements">Conditional Statements</string>
    <string name="menu_loops">Loops</string>
    <string name="menu_functions">Functions</string>
    <string name="menu_sign_out">Sign Out</string>
    <string name="menu_close_app">Close App</string>
</resources>